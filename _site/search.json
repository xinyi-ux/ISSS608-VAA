[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS608-VAA",
    "section": "",
    "text": "Welcome to ISSS608 VIsual Analytics and Appllications. In the website, you will find my coursework prepared for this course."
  },
  {
    "objectID": "In-calss Exercise/In-class_Ex05.html",
    "href": "In-calss Exercise/In-class_Ex05.html",
    "title": "In-class Exercise 05",
    "section": "",
    "text": "pacman::p_load(tidyverse, jsonlite, SmartEDA, tidygraph, ggraph)"
  },
  {
    "objectID": "In-calss Exercise/In-class_Ex05.html#inspect-structure",
    "href": "In-calss Exercise/In-class_Ex05.html#inspect-structure",
    "title": "In-class Exercise 05",
    "section": "Inspect Structure",
    "text": "Inspect Structure\n\nstr(kg,max.level=1)\n\nList of 5\n $ directed  : logi TRUE\n $ multigraph: logi TRUE\n $ graph     :List of 2\n $ nodes     :'data.frame': 17412 obs. of  10 variables:\n $ links     :'data.frame': 37857 obs. of  4 variables:"
  },
  {
    "objectID": "In-calss Exercise/In-class_Ex05.html#extract-and-inspect",
    "href": "In-calss Exercise/In-class_Ex05.html#extract-and-inspect",
    "title": "In-class Exercise 05",
    "section": "Extract and Inspect",
    "text": "Extract and Inspect\n\nnodes_tb1 &lt;- as_tibble(kg$nodes)\nedges_tb1 &lt;- as_tibble(kg$links)"
  },
  {
    "objectID": "In-calss Exercise/In-class_Ex05.html#initial-eda",
    "href": "In-calss Exercise/In-class_Ex05.html#initial-eda",
    "title": "In-class Exercise 05",
    "section": "Initial EDA",
    "text": "Initial EDA\n\nggplot(data = edges_tb1,\n       aes(y =`Edge Type`)) +\n     geom_bar()\n\n\n\n\n\n\n\n\n\nggplot(data = nodes_tb1,\n       aes(y =`Node Type`)) +\n     geom_bar()"
  },
  {
    "objectID": "In-calss Exercise/In-class_Ex05.html#creating-knowledge-graph",
    "href": "In-calss Exercise/In-class_Ex05.html#creating-knowledge-graph",
    "title": "In-class Exercise 05",
    "section": "Creating Knowledge Graph",
    "text": "Creating Knowledge Graph\nThis is\n\nStep 1: Mapping from node id to row index\n\nid_map&lt;- tibble(id= nodes_tb1$id,\n                index = seq_len(\n                  nrow(nodes_tb1)))\n\nThis ensures each d from your node list is mapped to the correct row number.\n\n\nStep 2 : Map source and target IDs to row indices\n\nedges_tb1&lt;- edges_tb1 %&gt;%\n  left_join(id_map,by = c(\"source\"=\"id\"))%&gt;%\n  rename(from= index)%&gt;%\n  left_join(id_map,by = c(\"target\" =  \"id\"))%&gt;%\n  rename(to = index)\n\n\n\nStep3: Filter out any unmatched(invalid) edges\n\nedges_tb1 = edges_tb1 %&gt;%\n  filter(!is.na(from),!is.na(to))\n\n\n\nStep 4: creating the graph\nLastly,tbl_grph() is used to create tidygraph’s graph object by using the code chunk below.\n\ngraph = tbl_graph(nodes = nodes_tb1,\n                  edges = edges_tb1,\n                  directed = TRUE)"
  },
  {
    "objectID": "In-calss Exercise/In-class_Ex05.html#visualising-the-knowledge-graph",
    "href": "In-calss Exercise/In-class_Ex05.html#visualising-the-knowledge-graph",
    "title": "In-class Exercise 05",
    "section": "Visualising the knowledge graph",
    "text": "Visualising the knowledge graph\n\nset.seed(1234)\n\n\nVisualising the whole Graph\n\nggraph(graph,layout = \"fr\") +\n  geom_edge_link(alpha = 0.3,\n                 colour = \"gray\")+\n  geom_node_point(aes(color = `Node Type`),\n                  size = 4) +\n  geom_node_text(aes(label = name),\n                 repel = TRUE,\n                 size = 2.5) +\n  theme_void()\n\n\n\nStep 1: Filter edges to onliy “Memberof”\n\ngraph_memberof &lt;- graph %&gt;%\n  activate(edges) %&gt;%\n  filter(`Edge Type` == \"MemberOf\")\n\n\n\nStep 2: Extract only connected nodes(i.e. used in these edges)\n\nused_node_indices&lt;- graph_memberof %&gt;%\n  activate(edges) %&gt;%\n  as_tibble() %&gt;%\n  select(from, to) %&gt;%\n  unlist() %&gt;%\n  unique()\n\n\n\nStep 3: Keep only those nodes\n\ngraph_memberof &lt;- graph_memberof %&gt;%\n  activate(nodes) %&gt;% \n  mutate(row_id = row_number()) %&gt;% \n  filter(row_id %in% used_node_indices) %&gt;% \n  select(-row_id) #optional cleanup\n\n\n\nPlot the sub-graph\n\nggraph(graph_memberof,\n       layout = \"fr\") +\n  geom_edge_link(alpha = 0.5,\n                 colour = \"gray\") +\n  geom_node_point(aes(color = `Node Type`),\n                  size = 1) +\n  geom_node_text(aes(label = name),\n                 repel = TRUE,\n                 size = 2.5) +\n  theme_void()\n\nWarning: ggrepel: 789 unlabeled data points (too many overlaps). Consider\nincreasing max.overlaps"
  }
]