---
title: "Hands-on_Ex03_b"
author: "xu xinyi"
format: html 
date-modified: "last-modified"
description: "Programming Animated Statistical Graphics with R"
categories: [gganimate,gifski,plotly,gapminder,tidyverse]
execute:
  echo: true
  eval: true
  warning: false
  freeze: true
---

# 4.1 Overview

In this hands-on exercise, you will learn how to create animated data visualization by using gganimate and plotly r packages. At the same time, you will learn how to (i) reshape data by using tidyr package, and (ii) process, wrangle and transform data by using dplyr package.

## 4.1.1 Basic concepts of animation

When creating animations, the plot does not actually move. Instead, many individual plots are built and then stitched together as movie frames, just like an old-school flip book or cartoon. Each frame is a different plot when conveying motion, which is built using some relevant subset of the aggregate data. The subset drives the flow of the animation when stitched back together.

```{r}
 library(png)

img <- readPNG("basic_concept.png")
plot(1:2, type='n')
rasterImage(img, 1, 1, 2, 2)
```

## 4.1.2 Terminology

Key concepts and terminology related to this type of visualization:

**-Frame**: In an animated line graph, each frame represents a different point in time or a different category.When the frame changes, the data points on the graph are updated to reflect the new data.

**-Animation Attributes**:The animation attributes are the settings that control how the animation behaves.

# 4. 2 Getting Started

## 4.2.1 Loading the R packages

First, write a code chunk to check, install and load the following R packages:

- [plotly](https://plotly.com/r/), R library for plotting interactive statistical graphs.

- [gganimate](https://gganimate.com/), extends the grammar of graphics as implemented by ggplot2 to include the description of animation.

- [gifski](https://cran.r-project.org/web/packages/gifski/index.html), converts video frames to GIF animations using pngquantâ€™s fancy features for efficient cross-frame palettes and temporal dithering. It produces animated GIFs that use thousands of colors per frame.

- [gapminder](https://cran.r-project.org/web/packages/gapminder/index.html), An excerpt of the data available at Gapminder.org. We just want to use its country_colors scheme.

- [tidyverse](https://www.tidyverse.org/), family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.

```{r}
pacman::p_load(readxl, gifski, gapminder,
               plotly, gganimate, tidyverse)
```

## 4.2.2 Importing the data

In this hands-on exercise, the Data worksheet from GlobalPopulation Excel workbook will be used.

Write a code chunk to import Data worksheet from GlobalPopulation Excel workbook by using appropriate R package from tidyverse family.

```{r}
col <- c("Country", "Continent")
globalPop <- read_xls("GlobalPopulation.xls",
                      sheet="Data") %>%
  mutate_each_(funs(factor(.)), col) %>%
  mutate(Year = as.integer(Year))
```

-   [read_xls()](https://readxl.tidyverse.org/reference/read_excel.html) of readxl package is used to import the Excel worksheet.
-   mutate_each\_() of dplyr package is used to convert all character data type into factor.
-   mutate of dplyr package is used to convert data values of Year field into integer.
-   funs() is part of the dplyr package, was used to create a list of function calls.However, it has been deprecated and replaced by the list() function.

Unfortunately, mutate_each\_() was deprecated in dplyr 0.7.0. and funs() was deprecated in dplyr 0.8.0. In view of this, we will re-write the code by using [mutate_at()](https://dplyr.tidyverse.org/reference/mutate_all.html) as shown in the code chunk below.

```{r}
col <- c("Country", "Continent")
globalPop <- read_xls("GlobalPopulation.xls",
                      sheet="Data") %>%
  mutate_at(col, as.factor) %>%
  mutate(Year = as.integer(Year))
```

Instead of using mutate_at(), across() can be used to derive the same outputs.

```{r}
col <- c("Country", "Continent")
globalPop <- read_xls("GlobalPopulation.xls",
                      sheet="Data") %>%
  mutate(across(col, as.factor)) %>%
  mutate(Year = as.integer(Year))
```

# 4.3 Animated Data Visualisation: gganimate methods

[gganimate](https://gganimate.com/) extends the grammar of graphics as implemented by ggplot2 to include the description of animation.

-   transition() defines how the data should be spread out and how it relates to itself across time.

-   view() defines how the positional scales should change along the animation.

-   shadow() defines how data from other points in time should be presented in the given point in time.

-   enter()/exit() defines how new data should appear and how old data should disappear during the course of the animation.

-   ease_aes() defines how different aesthetics should be eased during transitions.

## 4.3.1 Building a static population bubble plot

In the code chunk below, the basic ggplot2 functions are used to create a static bubble plot.

```{r}
ggplot(globalPop, aes(x = Old, y = Young, 
                      size = Population, 
                      colour = Country)) +
  geom_point(alpha = 0.7, 
             show.legend = FALSE) +
  scale_colour_manual(values = country_colors) +
  scale_size(range = c(2, 12)) +
  labs(title = 'Year: {frame_time}', 
       x = '% Aged', 
       y = '% Young') 
```

## 4.3.2 Building the animated bubble plot

-   [transition_time()](https://gganimate.com/reference/transition_time.html) of gganimate is used to create transition through distinct states in time (i.e. Year).That is intended for data where the states are representing specific point in time.

-   ease_aes() is used to control easing of aesthetics. The default is linear. Other methods are: quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce.

```{r}
ggplot(globalPop, aes(x = Old, y = Young, 
                      size = Population, 
                      colour = Country)) +
  geom_point(alpha = 0.7, 
             show.legend = FALSE) +
  scale_colour_manual(values = country_colors) +
  scale_size(range = c(2, 12)) +
  labs(title = 'Year: {frame_time}', 
       x = '% Aged', 
       y = '% Young') +
  transition_time(Year) +       
  ease_aes('linear')          
```

# 4.4 Animated Data Visualisation: plotly

In Plotly R package, both ggplotly() and plot_ly() support key frame animations through the frame argument/aesthetic. They also support an ids argument/aesthetic to ensure smooth transitions between objects with the same id (which helps facilitate object constancy).

## 4.4.1 Building an animated bubble plot: ggplotly() method

In this sub-section, you will learn how to create an animated bubble plot by using ggplotly() method.

```{r}
gg <- ggplot(globalPop, 
       aes(x = Old, 
           y = Young, 
           size = Population, 
           colour = Country)) +
  geom_point(aes(size = Population,
                 frame = Year),
             alpha = 0.7, 
             show.legend = FALSE) +
  scale_colour_manual(values = country_colors) +
  scale_size(range = c(2, 12)) +
  labs(x = '% Aged', 
       y = '% Young')

ggplotly(gg)
```

-   Appropriate ggplot2 functions are used to create a static bubble plot. The output is then saved as an R object called gg.

-   ggplotly() is then used to convert the R graphic object into an animated svg object.

**Notice** that although show.legend = FALSE argument was used, the legend still appears on the plot. To overcome this problem, theme(legend.position='none') should be used as shown in the plot and code chunk below.

```{r}
gg <- ggplot(globalPop, 
       aes(x = Old, 
           y = Young, 
           size = Population, 
           colour = Country)) +
  geom_point(aes(size = Population,
                 frame = Year),
             alpha = 0.7) +
  scale_colour_manual(values = country_colors) +
  scale_size(range = c(2, 12)) +
  labs(x = '% Aged', 
       y = '% Young') + 
  theme(legend.position='none')

ggplotly(gg)
```

## 4.4.2 Building an animated bubble plot: plot_ly() method

In this sub-section, you will learn how to create an animated bubble plot by using plot_ly() method.

```{r}
bp <- globalPop %>%
  plot_ly(x = ~Old, 
          y = ~Young, 
          size = ~Population, 
          color = ~Continent,
          sizes = c(2, 100),
          frame = ~Year, 
          text = ~Country, 
          hoverinfo = "text",
          type = 'scatter',
          mode = 'markers'
          ) %>%
  layout(showlegend = FALSE)
bp
```
