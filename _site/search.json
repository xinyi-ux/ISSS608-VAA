[
  {
    "objectID": "Take-home_Exercise/Take-home_Ex01/Take-home_Ex_feedback.html",
    "href": "Take-home_Exercise/Take-home_Ex01/Take-home_Ex_feedback.html",
    "title": "Take-home_Ex_feedback",
    "section": "",
    "text": "Selecting the work from: Ng Jin Yao\n\n\nThree good design principles:\n\nClear obijective and data processing: Data wrangling ensures accuracy and relevance in your visualizations. Addtionally, from the starter, stating out the data we are going to analyze which can make more sense for later visualization.\n\n\nDuplicates using distinct()\nData types (e.g., converting Age from chr to dbl)\nNew features like Age_group and Region using mutate() and case_when()\nJoining with geographic metadata using left_join() after transforming the PA column\n\n\nVisual diversity:There are three different visualization types tailored to the data’s characteristics.\n\n\nA population pyramid to illustrate age-sex structure (a demographic standard)\nA bar chart comparing regions by population and sex composition\nA half-eye + boxplot to examine age distribution patterns by region\n\n\nTransform geographic data: Extracting geographic data from ‘MasterPlan2019PlanningAreaBoundaryNoSea.geojson’(Town and Regions are based on the MasterPlan 2019). This can gave better and more accurate data about Town and Regions which can prevent any mistakes from the original datasets.\n\n\n\nThree areas for further improvement:\n\nLack of Weighted Mean Calculation Code in Population Pyramid Plot Visualisation Issue: You mention weighted means (using population count as weight) for each region but don’t show how you computed them.\nReproducibility and Code Commenting Issue: While your narrative is strong, some code logic is missing or only described in words. Without it, others can’t reproduce the visuals.\nHalf-eye + Box Plot Visualisation of Age vs Region needs to change to more readable version and be straightforward.\n\n\n\nMake-over version of data visualization-Half-eye + Box Plot Visualisation of Age vs Region\nRidgeline plot with inside plot and annotations: it conveys the ridgeline plot is a type of chart that displays the distribution of a numeric variable for several groups.\n\n\nPlot\n\npacman::p_load(tidyverse, ggplot2, ggrepel, patchwork, \n               ggthemes,dplyr, xml12, sf, scales) \n\n\nsgResData24 &lt;- read_csv(\"respopagesex2024.csv\")\n\n\ndistinct(sgResData24)\n\n# A tibble: 60,424 × 6\n   PA         SZ                     Age   Sex       Pop  Time\n   &lt;chr&gt;      &lt;chr&gt;                  &lt;chr&gt; &lt;chr&gt;   &lt;dbl&gt; &lt;dbl&gt;\n 1 Ang Mo Kio Ang Mo Kio Town Centre 0     Males      10  2024\n 2 Ang Mo Kio Ang Mo Kio Town Centre 0     Females    10  2024\n 3 Ang Mo Kio Ang Mo Kio Town Centre 1     Males      10  2024\n 4 Ang Mo Kio Ang Mo Kio Town Centre 1     Females    10  2024\n 5 Ang Mo Kio Ang Mo Kio Town Centre 2     Males      10  2024\n 6 Ang Mo Kio Ang Mo Kio Town Centre 2     Females    10  2024\n 7 Ang Mo Kio Ang Mo Kio Town Centre 3     Males      10  2024\n 8 Ang Mo Kio Ang Mo Kio Town Centre 3     Females    10  2024\n 9 Ang Mo Kio Ang Mo Kio Town Centre 4     Males      30  2024\n10 Ang Mo Kio Ang Mo Kio Town Centre 4     Females    10  2024\n# ℹ 60,414 more rows\n\n\n\nsgResData24 &lt;- sgResData24 %&gt;%\n  mutate(\n    # Convert age to numeric, handle \"90_and_Over\"\n    Age_num = case_when(\n      Age == \"90_and_Over\" ~ 90,\n      TRUE ~ suppressWarnings(as.numeric(Age))  # Avoid warnings from \"90_and_Over\"\n    ),\n    \n    # Group into age bands\n    Age_group = case_when(\n      Age_num &gt;= 0 & Age_num &lt;= 9   ~ \"0-9\",\n      Age_num &gt;= 10 & Age_num &lt;= 19 ~ \"10-19\",\n      Age_num &gt;= 20 & Age_num &lt;= 29 ~ \"20-29\",\n      Age_num &gt;= 30 & Age_num &lt;= 39 ~ \"30-39\",\n      Age_num &gt;= 40 & Age_num &lt;= 49 ~ \"40-49\",\n      Age_num &gt;= 50 & Age_num &lt;= 59 ~ \"50-59\",\n      Age_num &gt;= 60 & Age_num &lt;= 69 ~ \"60-69\",\n      Age_num &gt;= 70 & Age_num &lt;= 79 ~ \"70-79\",\n      Age_num &gt;= 80 & Age_num &lt;= 89 ~ \"80-89\",\n      Age_num &gt;= 90                ~ \"90+\",\n      TRUE                         ~ NA_character_\n    )\n  )\n\n\n#Install required packages if not already installed\nlibrary(sf)\nlibrary(xml2)\nlibrary(dplyr)\n\n# Load the GeoJSON file\ngeo_data &lt;- st_read(\"MasterPlan2019PlanningAreaBoundaryNoSea.geojson\")\n\nReading layer `MasterPlan2019PlanningAreaBoundaryNoSea' from data source \n  `C:\\xinyi-ux\\ISSS608-VAA\\Take-home_Exercise\\Take-home_Ex01\\MasterPlan2019PlanningAreaBoundaryNoSea.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 55 features and 2 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\n\n\n# Function to parse HTML and extract PLN_AREA_N and REGION_N\nextract_info &lt;- function(html_str) {\n  doc &lt;- read_html(html_str)\n  rows &lt;- xml_find_all(doc, \".//tr\")\n\n  # Loop through rows and extract key-value pairs\n  data &lt;- lapply(rows, function(row) {\n    th &lt;- xml_text(xml_find_first(row, \".//th\"))\n    td &lt;- xml_text(xml_find_first(row, \".//td\"))\n    if (!is.na(th) && !is.na(td)) {\n      return(setNames(list(td), th))\n    } else {\n      return(NULL)\n    }\n  })\n\n  # Combine and extract specific fields\n  info &lt;- do.call(c, data)\n  list(\n    Town = info[[\"PLN_AREA_N\"]],\n    Region = info[[\"REGION_N\"]]\n  )\n}\n\n\n# Apply the extraction function to each row\ninfo_list &lt;- lapply(geo_data$Description, extract_info)\n\n# Combine results into a data frame\ninfo_df &lt;- bind_rows(info_list) %&gt;% distinct() %&gt;% arrange(Region, Town)\n\n# View result\nprint(info_df)\n\n# A tibble: 55 × 2\n   Town          Region        \n   &lt;chr&gt;         &lt;chr&gt;         \n 1 BISHAN        CENTRAL REGION\n 2 BUKIT MERAH   CENTRAL REGION\n 3 BUKIT TIMAH   CENTRAL REGION\n 4 DOWNTOWN CORE CENTRAL REGION\n 5 GEYLANG       CENTRAL REGION\n 6 KALLANG       CENTRAL REGION\n 7 MARINA EAST   CENTRAL REGION\n 8 MARINA SOUTH  CENTRAL REGION\n 9 MARINE PARADE CENTRAL REGION\n10 MUSEUM        CENTRAL REGION\n# ℹ 45 more rows\n\n\n\nsgResData24 %&gt;% mutate(PA = toupper(PA))\n\n# A tibble: 60,424 × 8\n   PA         SZ                     Age   Sex       Pop  Time Age_num Age_group\n   &lt;chr&gt;      &lt;chr&gt;                  &lt;chr&gt; &lt;chr&gt;   &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;    \n 1 ANG MO KIO Ang Mo Kio Town Centre 0     Males      10  2024       0 0-9      \n 2 ANG MO KIO Ang Mo Kio Town Centre 0     Females    10  2024       0 0-9      \n 3 ANG MO KIO Ang Mo Kio Town Centre 1     Males      10  2024       1 0-9      \n 4 ANG MO KIO Ang Mo Kio Town Centre 1     Females    10  2024       1 0-9      \n 5 ANG MO KIO Ang Mo Kio Town Centre 2     Males      10  2024       2 0-9      \n 6 ANG MO KIO Ang Mo Kio Town Centre 2     Females    10  2024       2 0-9      \n 7 ANG MO KIO Ang Mo Kio Town Centre 3     Males      10  2024       3 0-9      \n 8 ANG MO KIO Ang Mo Kio Town Centre 3     Females    10  2024       3 0-9      \n 9 ANG MO KIO Ang Mo Kio Town Centre 4     Males      30  2024       4 0-9      \n10 ANG MO KIO Ang Mo Kio Town Centre 4     Females    10  2024       4 0-9      \n# ℹ 60,414 more rows\n\n\n\nlibrary(dplyr)\n\n# Rename Town to PA in the region info dataframe\nregion_info &lt;- info_df %&gt;% rename(PA = Town)\n\n# left join sgResData24 with region_info to get Region column\nsgResData24 &lt;- sgResData24 %&gt;% mutate(PA = toupper(PA)) %&gt;%\n  left_join(region_info, by = \"PA\")\n\nprint(sgResData24)\n\n# A tibble: 60,424 × 9\n   PA         SZ                Age   Sex     Pop  Time Age_num Age_group Region\n   &lt;chr&gt;      &lt;chr&gt;             &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt; \n 1 ANG MO KIO Ang Mo Kio Town … 0     Males    10  2024       0 0-9       NORTH…\n 2 ANG MO KIO Ang Mo Kio Town … 0     Fema…    10  2024       0 0-9       NORTH…\n 3 ANG MO KIO Ang Mo Kio Town … 1     Males    10  2024       1 0-9       NORTH…\n 4 ANG MO KIO Ang Mo Kio Town … 1     Fema…    10  2024       1 0-9       NORTH…\n 5 ANG MO KIO Ang Mo Kio Town … 2     Males    10  2024       2 0-9       NORTH…\n 6 ANG MO KIO Ang Mo Kio Town … 2     Fema…    10  2024       2 0-9       NORTH…\n 7 ANG MO KIO Ang Mo Kio Town … 3     Males    10  2024       3 0-9       NORTH…\n 8 ANG MO KIO Ang Mo Kio Town … 3     Fema…    10  2024       3 0-9       NORTH…\n 9 ANG MO KIO Ang Mo Kio Town … 4     Males    30  2024       4 0-9       NORTH…\n10 ANG MO KIO Ang Mo Kio Town … 4     Fema…    10  2024       4 0-9       NORTH…\n# ℹ 60,414 more rows\n\n\n\nRidgeline plot  :\n\nstat_halfeye() is used for density plots\nstat_summary() for showing medians\nannotate() adds static text annotations\nscale_() functions customize scales and colors, including a manual color scale using MetBrewer::met.brewer()\ncoord_flip() flips the axes to change the plot orientation\n\nLegend Construction (p_legend)\n\nWe use a subset of data (rent_title_words) filtered for the word beautiful\nAnd geom_curve to draw arrows pointing to specific elements\n\nInserting the Legend into the Main Plot\n\nThe inset_element function combines the main plot (p) and the legend (p_legend) by embedding the legend within the main plot’s space\n\n\n\nglimpse(sgResData24)\n\nRows: 60,424\nColumns: 9\n$ PA        &lt;chr&gt; \"ANG MO KIO\", \"ANG MO KIO\", \"ANG MO KIO\", \"ANG MO KIO\", \"ANG…\n$ SZ        &lt;chr&gt; \"Ang Mo Kio Town Centre\", \"Ang Mo Kio Town Centre\", \"Ang Mo …\n$ Age       &lt;chr&gt; \"0\", \"0\", \"1\", \"1\", \"2\", \"2\", \"3\", \"3\", \"4\", \"4\", \"5\", \"5\", …\n$ Sex       &lt;chr&gt; \"Males\", \"Females\", \"Males\", \"Females\", \"Males\", \"Females\", …\n$ Pop       &lt;dbl&gt; 10, 10, 10, 10, 10, 10, 10, 10, 30, 10, 20, 10, 20, 30, 30, …\n$ Time      &lt;dbl&gt; 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, …\n$ Age_num   &lt;dbl&gt; 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, …\n$ Age_group &lt;chr&gt; \"0-9\", \"0-9\", \"0-9\", \"0-9\", \"0-9\", \"0-9\", \"0-9\", \"0-9\", \"0-9…\n$ Region    &lt;chr&gt; \"NORTH-EAST REGION\", \"NORTH-EAST REGION\", \"NORTH-EAST REGION…\n\n\n\nlibrary(ggdist)\nlibrary(ggtext)\nlibrary(extrafont) \nfont_import()\n\nImporting fonts may take a few minutes, depending on the number of fonts and the speed of the system.\nContinue? [y/n] \n\n# Compute weighted mean for each region\nmean_age &lt;- sgResData24 %&gt;%\n  group_by(Region) %&gt;%\n  summarise(weighted_mean = weighted.mean(Age_num, Pop, na.rm = TRUE))\n\n# Theme and background setup\nbg_color &lt;- \"grey97\"\nfont_family &lt;- \"Fira Sans\"\n\nplot_subtitle &lt;- glue::glue(\"Age distribution by Singapore regions in 2024.\\nRed diamonds show the population-weighted mean age.\")\n\n# Main plot\np &lt;- ggplot(sgResData24, aes(x = Region, y = Age_num, weight = Pop)) +\n  stat_halfeye(fill_type = \"segments\", alpha = 0.3) +\n  stat_interval() +\n  stat_summary(geom = \"point\", fun = median, color = \"black\") +\n  geom_point(data = mean_age, aes(x = Region, y = weighted_mean), \n             color = \"red\", size = 3, shape = 18, inherit.aes = FALSE) +\n  scale_x_discrete(labels = stringr::str_to_title) +\n  scale_y_continuous(limits = c(0, 100), breaks = seq(0, 100, 10)) +\n  coord_flip() +\n  labs(\n    title = toupper(\"AGE DISTRIBUTION BY REGION\"),\n    subtitle = plot_subtitle,\n    caption = \"Data: Singapore Department of Statistics, 2024\",\n    x = NULL,\n    y = \"Age\"\n  ) +\n  theme_minimal(base_family = font_family) +\n  theme(\n    plot.background = element_rect(color = NA, fill = bg_color),\n    panel.grid = element_blank(),\n    panel.grid.major.x = element_line(linewidth = 0.1, color = \"grey75\"),\n    plot.title = element_text(family = \"Serif\"),\n    plot.subtitle = ggtext::element_textbox_simple(margin = margin(t = 4, b = 16), size = 10),\n    plot.caption = ggtext::element_textbox_simple(margin = margin(t = 12), size = 8),\n    axis.text.y = element_text(hjust = 0, margin = margin(r = -10), family = \"Serif\"),\n    plot.margin = margin(4, 4, 4, 4)\n  )\n\n\np\n\n\n\n\n\n\n\n\n\nCentral Region has the oldest average age.\n\n\n\nWest and North-East Regions have younger populations on average.\n\n\n\nThe spread (width of intervals) is relatively similar, showing a broad mix of age groups in all regions."
  },
  {
    "objectID": "Take-home_Exercise/Take-home_Ex01/Take-home_Exercise01.html",
    "href": "Take-home_Exercise/Take-home_Ex01/Take-home_Exercise01.html",
    "title": "Take-home_Exercise01",
    "section": "",
    "text": "A local online media company that publishes daily content on digital platforms is planning to release an article on demographic structures and distribution of Singapore in 2024.\n\n\n\nAssuming the role of the graphical editor of the media company, you are tasked to prepare at most three data visualisation for the article.The data should be processed by using appropriate tidyverse family of packages and the data visualisation must be prepared using ggplot2 and its extensions."
  },
  {
    "objectID": "Take-home_Exercise/Take-home_Ex01/Take-home_Exercise01.html#setting-the-scene",
    "href": "Take-home_Exercise/Take-home_Ex01/Take-home_Exercise01.html#setting-the-scene",
    "title": "Take-home_Exercise01",
    "section": "",
    "text": "A local online media company that publishes daily content on digital platforms is planning to release an article on demographic structures and distribution of Singapore in 2024."
  },
  {
    "objectID": "Take-home_Exercise/Take-home_Ex01/Take-home_Exercise01.html#our-task",
    "href": "Take-home_Exercise/Take-home_Ex01/Take-home_Exercise01.html#our-task",
    "title": "Take-home_Exercise01",
    "section": "",
    "text": "Assuming the role of the graphical editor of the media company, you are tasked to prepare at most three data visualisation for the article.The data should be processed by using appropriate tidyverse family of packages and the data visualisation must be prepared using ggplot2 and its extensions."
  },
  {
    "objectID": "Take-home_Exercise/Take-home_Ex01/Take-home_Exercise01.html#loading-packages",
    "href": "Take-home_Exercise/Take-home_Ex01/Take-home_Exercise01.html#loading-packages",
    "title": "Take-home_Exercise01",
    "section": "Loading packages",
    "text": "Loading packages\nWe load the following R packages using the pacman::p_load() function:\n\ntidyverse: Core collection of R packages designed for data science.\nhaven: To read in data formats such as SAS and SPSS.\nggrepel: to provides geoms for ggplot2 to repel overlapping text labels.\nggthemes: to use additional themes for ggplot2.\npatchwork: to prepare composite figure created using ggplot2.\nggridges: to plot ridgeline plots.\nggdist: for visualizations of distributions and uncertainty.\nscales: provides the internal scaling infrastructure used by ggplot2.\n\n\npacman::p_load(tidyverse, haven,\n               ggrepel, ggthemes,\n               ggridges, ggdist,\n               patchwork, scales, ggExtra)"
  },
  {
    "objectID": "Take-home_Exercise/Take-home_Ex01/Take-home_Exercise01.html#import-data",
    "href": "Take-home_Exercise/Take-home_Ex01/Take-home_Exercise01.html#import-data",
    "title": "Take-home_Exercise01",
    "section": "Import data",
    "text": "Import data\nTo accomplish the task, Singapore Residents by Planning Area / Subzone, Single Year of Age and Sex, June 2024 dataset shares by Department of Statistics, Singapore (DOS) should be used.\nThe code chunk below imports respopagesex2024.csv into R environment by using read_csv()function of readr package. readr is one of the tidyverse package.\nWe import this dataset as sgresident\n\nsgresident &lt;- read_csv(\"respopagesex2024.csv \")"
  },
  {
    "objectID": "Take-home_Exercise/Take-home_Ex01/Take-home_Exercise01.html#data-pre-processing",
    "href": "Take-home_Exercise/Take-home_Ex01/Take-home_Exercise01.html#data-pre-processing",
    "title": "Take-home_Exercise01",
    "section": "Data pre-processing",
    "text": "Data pre-processing\nWe first take a look at the data and check if there are any duplicates."
  },
  {
    "objectID": "Take-home_Exercise/Take-home_Ex01/Take-home_Exercise01.html#glimpse-of-data",
    "href": "Take-home_Exercise/Take-home_Ex01/Take-home_Exercise01.html#glimpse-of-data",
    "title": "Take-home_Exercise01",
    "section": "Glimpse of data",
    "text": "Glimpse of data\nUsing the glimpse() function, we see that the dataset consists of 60,424 rows and 6 columns. It also shows the data type of each columns and first few entries of each columns.\n\nglimpse(sgresident)\n\nRows: 60,424\nColumns: 6\n$ PA   &lt;chr&gt; \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo K…\n$ SZ   &lt;chr&gt; \"Ang Mo Kio Town Centre\", \"Ang Mo Kio Town Centre\", \"Ang Mo Kio T…\n$ Age  &lt;chr&gt; \"0\", \"0\", \"1\", \"1\", \"2\", \"2\", \"3\", \"3\", \"4\", \"4\", \"5\", \"5\", \"6\", …\n$ Sex  &lt;chr&gt; \"Males\", \"Females\", \"Males\", \"Females\", \"Males\", \"Females\", \"Male…\n$ Pop  &lt;dbl&gt; 10, 10, 10, 10, 10, 10, 10, 10, 30, 10, 20, 10, 20, 30, 30, 10, 3…\n$ Time &lt;dbl&gt; 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,…"
  },
  {
    "objectID": "Take-home_Exercise/Take-home_Ex01/Take-home_Exercise01.html#check-for-duplicates",
    "href": "Take-home_Exercise/Take-home_Ex01/Take-home_Exercise01.html#check-for-duplicates",
    "title": "Take-home_Exercise01",
    "section": "Check for duplicates",
    "text": "Check for duplicates\nUsing the duplicated() function, we see that there are no duplicate entries in the data.\n\nsgresident[duplicated(sgresident),]\n\n# A tibble: 0 × 6\n# ℹ 6 variables: PA &lt;chr&gt;, SZ &lt;chr&gt;, Age &lt;chr&gt;, Sex &lt;chr&gt;, Pop &lt;dbl&gt;,\n#   Time &lt;dbl&gt;\n\n\nThere is 0 rows that has duplicated results. The next step will be changing the inappropriate data type and checking for missing values as we needed. Due there are only 6 columns (which means 6 variables only), it is not neccessary for us to filter variables anymore."
  },
  {
    "objectID": "Take-home_Exercise/Take-home_Ex01/Take-home_Exercise01.html#change-data-type-of-selected-variables",
    "href": "Take-home_Exercise/Take-home_Ex01/Take-home_Exercise01.html#change-data-type-of-selected-variables",
    "title": "Take-home_Exercise01",
    "section": "Change data type of selected variables",
    "text": "Change data type of selected variables\nVariables with inappropriate data type are Age, Sex, Time. Starting from Age:\nThe as.numeric() function in R is a crucial tool for data manipulation, allowing users to convert data into numeric form.\n\nsgresident &lt;- sgresident %&gt;% \n  mutate(Age = as.numeric(Age))\n\nConverting Sex column for better visualization, especially for consistent ordering and coloring in plots. Coloring in plots especially assign specific colors in ggplot2 will be easier. Converting Sec column to a factor with explicit levels: “Males” and “Females”. This can prevent mismatches or typos.\n\nsgresident &lt;- sgresident %&gt;%\n  mutate(Sex = factor(Sex, levels = c(\"Males\", \"Females\")))\n\nMaking sure about the Time column consisted of discrete numbers, transforming Time from  to  is the way to go.\n\nsgresident &lt;- sgresident %&gt;%\n  mutate(Time = as.integer(Time))"
  },
  {
    "objectID": "Take-home_Exercise/Take-home_Ex01/Take-home_Exercise01.html#check-for-missing-values",
    "href": "Take-home_Exercise/Take-home_Ex01/Take-home_Exercise01.html#check-for-missing-values",
    "title": "Take-home_Exercise01",
    "section": "Check for missing values",
    "text": "Check for missing values\nMany datasets store missing data as text placeholders like “NA” and “NULL”. But in R ecosystem, “NA” may not be recognized. Coverting data first can expose hidden issues and make accurate statistical summaries like using mean() and boxplot() functions. is.na() function can checkthe missing values for each columns.\n\ncolSums(is.na(sgresident ))\n\n  PA   SZ  Age  Sex  Pop Time \n   0    0  664    0    0    0 \n\n\nThe age column has 664 missing values, which have been stored as strings before data type conversion. In this case, we do not need to remove those data."
  },
  {
    "objectID": "Take-home_Exercise/Take-home_Ex01/Take-home_Exercise01.html#preview-pre-processed-dataframe",
    "href": "Take-home_Exercise/Take-home_Ex01/Take-home_Exercise01.html#preview-pre-processed-dataframe",
    "title": "Take-home_Exercise01",
    "section": "Preview pre-processed dataframe",
    "text": "Preview pre-processed dataframe\nWe use the function head() to preview the first few rows of the pre-processed dataframe:\n\nhead(sgresident, 200)\n\n# A tibble: 200 × 6\n   PA         SZ                       Age Sex       Pop  Time\n   &lt;chr&gt;      &lt;chr&gt;                  &lt;dbl&gt; &lt;fct&gt;   &lt;dbl&gt; &lt;int&gt;\n 1 Ang Mo Kio Ang Mo Kio Town Centre     0 Males      10  2024\n 2 Ang Mo Kio Ang Mo Kio Town Centre     0 Females    10  2024\n 3 Ang Mo Kio Ang Mo Kio Town Centre     1 Males      10  2024\n 4 Ang Mo Kio Ang Mo Kio Town Centre     1 Females    10  2024\n 5 Ang Mo Kio Ang Mo Kio Town Centre     2 Males      10  2024\n 6 Ang Mo Kio Ang Mo Kio Town Centre     2 Females    10  2024\n 7 Ang Mo Kio Ang Mo Kio Town Centre     3 Males      10  2024\n 8 Ang Mo Kio Ang Mo Kio Town Centre     3 Females    10  2024\n 9 Ang Mo Kio Ang Mo Kio Town Centre     4 Males      30  2024\n10 Ang Mo Kio Ang Mo Kio Town Centre     4 Females    10  2024\n# ℹ 190 more rows"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_c.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_c.html",
    "title": "Hands-on_Ex04_c",
    "section": "",
    "text": "Visualising uncertainty is relatively new in statistical graphics. In this chapter, you will gain hands-on experience on creating statistical graphics for visualising uncertainty. By the end of this chapter you will be able:\n\nto plot statistics error bars by using ggplot2.\nto plot interactive error bars by combining ggplot2, plotly and DT.\nto create advanced by using ggdist.\nto create hypothetical outcome plots (HOPs) by using ungeviz package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_c.html#installing-and-loading-the-packages",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_c.html#installing-and-loading-the-packages",
    "title": "Hands-on_Ex04_c",
    "section": "Installing and loading the packages",
    "text": "Installing and loading the packages\nFor the purpose of this exercise, the following R packages will be used, they are:\n\ntidyverse, a family of R packages for data science process, plotly for creating interactive plot.\ngganimate for creating animation plot.\nDT for displaying interactive html table.\ncrosstalk for for implementing cross-widget interactions. (currently, linked brushing and filtering)\nggdist for visualising distribution and uncertainty.\n\n\npacman::p_load(plotly, crosstalk, DT, \n               ggdist, ggridges, colorspace,\n               gganimate, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_c.html#data-import",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_c.html#data-import",
    "title": "Hands-on_Ex04_c",
    "section": "Data import",
    "text": "Data import\n\nexam &lt;- read_csv(\"Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_c.html#plotting-standard-error-bars-of-point-estimates",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_c.html#plotting-standard-error-bars-of-point-estimates",
    "title": "Hands-on_Ex04_c",
    "section": "Plotting standard error bars of point estimates",
    "text": "Plotting standard error bars of point estimates\nNow we are ready to plot the standard error bars of mean maths score by race as shown below.\n\nThe plotThe code chunk\n\n\n\n#|echo: false\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=RACE, \n        ymin=mean-se, \n        ymax=mean+se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    linewidth=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  ggtitle(\"Standard error of mean maths score by race\")\n\n\n\n\n\n\n\n\n\n\n\n#|eval: false\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=RACE, \n        ymin=mean-se, \n        ymax=mean+se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    linewidth=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  ggtitle(\"Standard error of mean maths score by race\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_c.html#plotting-confidence-interval-of-point-estimates",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_c.html#plotting-confidence-interval-of-point-estimates",
    "title": "Hands-on_Ex04_c",
    "section": "Plotting confidence interval of point estimates",
    "text": "Plotting confidence interval of point estimates\nInstead of plotting the standard error bar of point estimates, we can also plot the confidence intervals of mean maths score by race.\n\nThe plotThe code chunk\n\n\n\n#|echo: false\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=reorder(RACE, -mean), \n        ymin=mean-1.96*se, \n        ymax=mean+1.96*se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    linewidth=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  labs(x = \"Maths score\",\n       title = \"95% confidence interval of mean maths score by race\")\n\n\n\n\n\n\n\n\n\n\n\n#|eval: false\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=reorder(RACE, -mean), \n        ymin=mean-1.96*se, \n        ymax=mean+1.96*se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    linewidth=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  labs(x = \"Maths score\",\n       title = \"95% confidence interval of mean maths score by race\")\n\n\n\n\n\n\n\n\n\n\n\n\nThe confidence intervals are computed by using the formula mean+/-1.96*se.\nThe error bars is sorted by using the average maths scores.\nlabs() argument of ggplot2 is used to change the x-axis label."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_c.html#visualizing-the-uncertainty-of-point-estimates-with-interactive-error-bars",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_c.html#visualizing-the-uncertainty-of-point-estimates-with-interactive-error-bars",
    "title": "Hands-on_Ex04_c",
    "section": "Visualizing the uncertainty of point estimates with interactive error bars",
    "text": "Visualizing the uncertainty of point estimates with interactive error bars\nIn this section, you will learn how to plot interactive error bars for the 99% confidence interval of mean maths score by race as shown in the figure below.\n\nThe plotThe code chunk\n\n\n\n#|echo: false\nshared_df = SharedData$new(my_sum)\n\nbscols(widths = c(4,8),\n       ggplotly((ggplot(shared_df) +\n                   geom_errorbar(aes(\n                     x=reorder(RACE, -mean),\n                     ymin=mean-2.58*se, \n                     ymax=mean+2.58*se), \n                     width=0.2, \n                     colour=\"black\", \n                     alpha=0.9, \n                     size=0.5) +\n                   geom_point(aes(\n                     x=RACE, \n                     y=mean, \n                     text = paste(\"Race:\", `RACE`, \n                                  \"&lt;br&gt;N:\", `n`,\n                                  \"&lt;br&gt;Avg. Scores:\", round(mean, digits = 2),\n                                  \"&lt;br&gt;95% CI:[\", \n                                  round((mean-2.58*se), digits = 2), \",\",\n                                  round((mean+2.58*se), digits = 2),\"]\")),\n                     stat=\"identity\", \n                     color=\"red\", \n                     size = 1.5, \n                     alpha=1) + \n                   xlab(\"Race\") + \n                   ylab(\"Average Scores\") + \n                   theme_minimal() + \n                   theme(axis.text.x = element_text(\n                     angle = 45, vjust = 0.5, hjust=1)) +\n                   ggtitle(\"99% Confidence interval of average /&lt;br&gt;maths scores by race\")), \n                tooltip = \"text\"), \n       DT::datatable(shared_df, \n                     rownames = FALSE, \n                     class=\"compact\", \n                     width=\"100%\", \n                     options = list(pageLength = 10,\n                                    scrollX=T), \n                     colnames = c(\"No. of pupils\", \n                                  \"Avg Scores\",\n                                  \"Std Dev\",\n                                  \"Std Error\")) %&gt;%\n         formatRound(columns=c('mean', 'sd', 'se'),\n                     digits=2))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#|eval: false\nshared_df = SharedData$new(my_sum)\n\nbscols(widths = c(4,8),\n       ggplotly((ggplot(shared_df) +\n                   geom_errorbar(aes(\n                     x=reorder(RACE, -mean),\n                     ymin=mean-2.58*se, \n                     ymax=mean+2.58*se), \n                     width=0.2, \n                     colour=\"black\", \n                     alpha=0.9, \n                     size=0.5) +\n                   geom_point(aes(\n                     x=RACE, \n                     y=mean, \n                     text = paste(\"Race:\", `RACE`, \n                                  \"&lt;br&gt;N:\", `n`,\n                                  \"&lt;br&gt;Avg. Scores:\", round(mean, digits = 2),\n                                  \"&lt;br&gt;95% CI:[\", \n                                  round((mean-2.58*se), digits = 2), \",\",\n                                  round((mean+2.58*se), digits = 2),\"]\")),\n                     stat=\"identity\", \n                     color=\"red\", \n                     size = 1.5, \n                     alpha=1) + \n                   xlab(\"Race\") + \n                   ylab(\"Average Scores\") + \n                   theme_minimal() + \n                   theme(axis.text.x = element_text(\n                     angle = 45, vjust = 0.5, hjust=1)) +\n                   ggtitle(\"99% Confidence interval of average /&lt;br&gt;maths scores by race\")), \n                tooltip = \"text\"), \n       DT::datatable(shared_df, \n                     rownames = FALSE, \n                     class=\"compact\", \n                     width=\"100%\", \n                     options = list(pageLength = 10,\n                                    scrollX=T), \n                     colnames = c(\"No. of pupils\", \n                                  \"Avg Scores\",\n                                  \"Std Dev\",\n                                  \"Std Error\")) %&gt;%\n         formatRound(columns=c('mean', 'sd', 'se'),\n                     digits=2))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nVisualising Uncertainty: ggdist package\n\nggdist is an R package that provides a flexible set of ggplot2 geoms and stats designed especially for visualising distributions and uncertainty.\nIt is designed for both frequentist and Bayesian uncertainty visualization, taking the view that uncertainty visualization can be unified through the perspective of distribution visualization: 1.for frequentist models, one visualises confidence distributions or bootstrap distributions (see vignette(“freq-uncertainty-vis”)); 2.for Bayesian models, one visualises probability distributions (see the tidybayes package, which builds on top of ggdist).\n\n\nVisualizing the uncertainty of point estimates: ggdist methods\nIn the code chunk below, stat_pointinterval() of ggdist is used to build a visual for displaying distribution of maths scores by race.\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_pointinterval() +\n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Mean Point + Multiple-interval plot\")\n\n\n\n\n\n\n\n\nFor example, in the code chunk below the following arguments are used:\n.width = 0.95 .point = median .interval = qi\n\nexam %&gt;%\n  ggplot(aes(x = RACE, y = MATHS)) +\n  stat_pointinterval(.width = 0.95,\n  .point = median,\n  .interval = qi) +\n  labs(\n    title = \"Visualising confidence intervals of median math score\",\n    subtitle = \"Median Point + Multiple-interval plot\")\n\n\n\n\n\n\n\n\n\n\nVisualizing the uncertainty of point estimates: ggdist methods\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_pointinterval(\n    show.legend = FALSE) +   \n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Mean Point + Multiple-interval plot\")\n\n\n\n\n\n\n\n\n\n\nVisualizing the uncertainty of point estimates: ggdist methods\nIn the code chunk below, stat_gradientinterval() of ggdist is used to build a visual for displaying distribution of maths scores by race.\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_gradientinterval(   \n    fill = \"skyblue\",      \n    show.legend = TRUE     \n  ) +                        \n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Gradient + interval plot\")\n\n\n\n\n\n\n\n\n\n\n\nVisualising Uncertainty with Hypothetical Outcome Plots (HOPs)\n\nInstalling ungeviz package\n\ndevtools::install_github(\"wilkelab/ungeviz\")\n\nstrapgod (NA     -&gt; ea2b1ecfc...) [GitHub]\nrlang    (1.1.5  -&gt; 1.1.6       ) [CRAN]\ncli      (3.6.3  -&gt; 3.6.5       ) [CRAN]\nutf8     (1.2.4  -&gt; 1.2.5       ) [CRAN]\npillar   (1.10.1 -&gt; 1.10.2      ) [CRAN]\nstringi  (1.8.4  -&gt; 1.8.7       ) [CRAN]\nR6       (2.5.1  -&gt; 2.6.1       ) [CRAN]\ncpp11    (0.5.1  -&gt; 0.5.2       ) [CRAN]\nscales   (1.3.0  -&gt; 1.4.0       ) [CRAN]\nggplot2  (3.5.1  -&gt; 3.5.2       ) [CRAN]\n\n\nrlang   (1.1.5  -&gt; 1.1.6 ) [CRAN]\ncli     (3.6.3  -&gt; 3.6.5 ) [CRAN]\nutf8    (1.2.4  -&gt; 1.2.5 ) [CRAN]\npillar  (1.10.1 -&gt; 1.10.2) [CRAN]\nstringi (1.8.4  -&gt; 1.8.7 ) [CRAN]\nR6      (2.5.1  -&gt; 2.6.1 ) [CRAN]\ncpp11   (0.5.1  -&gt; 0.5.2 ) [CRAN]\n\n\npackage 'rlang' successfully unpacked and MD5 sums checked\n\n\npackage 'cli' successfully unpacked and MD5 sums checked\n\n\npackage 'utf8' successfully unpacked and MD5 sums checked\npackage 'pillar' successfully unpacked and MD5 sums checked\npackage 'stringi' successfully unpacked and MD5 sums checked\n\n\npackage 'R6' successfully unpacked and MD5 sums checked\npackage 'cpp11' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\user.DESKTOP-QJ387K9\\AppData\\Local\\Temp\\RtmpQ35YFK\\downloaded_packages\n── R CMD build ─────────────────────────────────────────────────────────────────\n* checking for file 'C:\\Users\\user.DESKTOP-QJ387K9\\AppData\\Local\\Temp\\RtmpQ35YFK\\remotes79001fd876d5\\DavisVaughan-strapgod-ea2b1ec/DESCRIPTION' ... OK\n* preparing 'strapgod':\n* checking DESCRIPTION meta-information ... OK\n* checking for LF line-endings in source and make files and shell scripts\n* checking for empty or unneeded directories\nOmitted 'LazyData' from DESCRIPTION\n* building 'strapgod_0.0.4.9000.tar.gz'\n\n\n\npackage 'rlang' successfully unpacked and MD5 sums checked\n\n\npackage 'cli' successfully unpacked and MD5 sums checked\n\n\npackage 'utf8' successfully unpacked and MD5 sums checked\npackage 'pillar' successfully unpacked and MD5 sums checked\npackage 'stringi' successfully unpacked and MD5 sums checked\n\n\npackage 'R6' successfully unpacked and MD5 sums checked\npackage 'cpp11' successfully unpacked and MD5 sums checked\npackage 'scales' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\user.DESKTOP-QJ387K9\\AppData\\Local\\Temp\\RtmpQ35YFK\\downloaded_packages\n\n\n── R CMD build ─────────────────────────────────────────────────────────────────\n* checking for file 'C:\\Users\\user.DESKTOP-QJ387K9\\AppData\\Local\\Temp\\RtmpQ35YFK\\remotes79007f2a4396\\wilkelab-ungeviz-74e1651/DESCRIPTION' ... OK\n* preparing 'ungeviz':\n* checking DESCRIPTION meta-information ... OK\n* checking for LF line-endings in source and make files and shell scripts\n* checking for empty or unneeded directories\n* building 'ungeviz_0.1.0.tar.gz'\n\n\n\n\n\nLaunch the application in R\n\nlibrary(ungeviz)\n\n\n\nVisualising Uncertainty with Hypothetical Outcome Plots (HOPs)\n\nggplot(data = exam, \n       (aes(x = factor(RACE), \n            y = MATHS))) +\n  geom_point(position = position_jitter(\n    height = 0.3, \n    width = 0.05), \n    size = 0.4, \n    color = \"#0072B2\", \n    alpha = 1/2) +\n  geom_hpline(data = sampler(25, \n                             group = RACE), \n              height = 0.6, \n              color = \"#D55E00\") +\n  theme_bw() + \n  transition_states(.draw, 1, 3)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_c.html#visualizing-the-uncertainty-of-point-estimates-ggdist-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_c.html#visualizing-the-uncertainty-of-point-estimates-ggdist-methods",
    "title": "Hands-on_Ex04_c",
    "section": "Visualizing the uncertainty of point estimates: ggdist methods",
    "text": "Visualizing the uncertainty of point estimates: ggdist methods\nIn the code chunk below, stat_pointinterval() of ggdist is used to build a visual for displaying distribution of maths scores by race.\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_pointinterval() +\n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Mean Point + Multiple-interval plot\")\n\n\n\n\n\n\n\n\nFor example, in the code chunk below the following arguments are used:\n.width = 0.95 .point = median .interval = qi\n\nexam %&gt;%\n  ggplot(aes(x = RACE, y = MATHS)) +\n  stat_pointinterval(.width = 0.95,\n  .point = median,\n  .interval = qi) +\n  labs(\n    title = \"Visualising confidence intervals of median math score\",\n    subtitle = \"Median Point + Multiple-interval plot\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_c.html#visualizing-the-uncertainty-of-point-estimates-ggdist-methods-1",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_c.html#visualizing-the-uncertainty-of-point-estimates-ggdist-methods-1",
    "title": "Hands-on_Ex04_c",
    "section": "Visualizing the uncertainty of point estimates: ggdist methods",
    "text": "Visualizing the uncertainty of point estimates: ggdist methods\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_pointinterval(\n    show.legend = FALSE) +   \n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Mean Point + Multiple-interval plot\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_c.html#visualizing-the-uncertainty-of-point-estimates-ggdist-methods-2",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_c.html#visualizing-the-uncertainty-of-point-estimates-ggdist-methods-2",
    "title": "Hands-on_Ex04_c",
    "section": "Visualizing the uncertainty of point estimates: ggdist methods",
    "text": "Visualizing the uncertainty of point estimates: ggdist methods\nIn the code chunk below, stat_gradientinterval() of ggdist is used to build a visual for displaying distribution of maths scores by race.\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_gradientinterval(   \n    fill = \"skyblue\",      \n    show.legend = TRUE     \n  ) +                        \n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Gradient + interval plot\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_c.html#installing-ungeviz-package",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_c.html#installing-ungeviz-package",
    "title": "Hands-on_Ex04_c",
    "section": "Installing ungeviz package",
    "text": "Installing ungeviz package\n\ndevtools::install_github(\"wilkelab/ungeviz\")\n\nstrapgod (NA     -&gt; ea2b1ecfc...) [GitHub]\nrlang    (1.1.5  -&gt; 1.1.6       ) [CRAN]\ncli      (3.6.3  -&gt; 3.6.5       ) [CRAN]\nutf8     (1.2.4  -&gt; 1.2.5       ) [CRAN]\npillar   (1.10.1 -&gt; 1.10.2      ) [CRAN]\nstringi  (1.8.4  -&gt; 1.8.7       ) [CRAN]\nR6       (2.5.1  -&gt; 2.6.1       ) [CRAN]\ncpp11    (0.5.1  -&gt; 0.5.2       ) [CRAN]\nscales   (1.3.0  -&gt; 1.4.0       ) [CRAN]\nggplot2  (3.5.1  -&gt; 3.5.2       ) [CRAN]\n\n\nrlang   (1.1.5  -&gt; 1.1.6 ) [CRAN]\ncli     (3.6.3  -&gt; 3.6.5 ) [CRAN]\nutf8    (1.2.4  -&gt; 1.2.5 ) [CRAN]\npillar  (1.10.1 -&gt; 1.10.2) [CRAN]\nstringi (1.8.4  -&gt; 1.8.7 ) [CRAN]\nR6      (2.5.1  -&gt; 2.6.1 ) [CRAN]\ncpp11   (0.5.1  -&gt; 0.5.2 ) [CRAN]\n\n\npackage 'rlang' successfully unpacked and MD5 sums checked\n\n\npackage 'cli' successfully unpacked and MD5 sums checked\n\n\npackage 'utf8' successfully unpacked and MD5 sums checked\npackage 'pillar' successfully unpacked and MD5 sums checked\npackage 'stringi' successfully unpacked and MD5 sums checked\n\n\npackage 'R6' successfully unpacked and MD5 sums checked\npackage 'cpp11' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\user.DESKTOP-QJ387K9\\AppData\\Local\\Temp\\RtmpQ35YFK\\downloaded_packages\n── R CMD build ─────────────────────────────────────────────────────────────────\n* checking for file 'C:\\Users\\user.DESKTOP-QJ387K9\\AppData\\Local\\Temp\\RtmpQ35YFK\\remotes79001fd876d5\\DavisVaughan-strapgod-ea2b1ec/DESCRIPTION' ... OK\n* preparing 'strapgod':\n* checking DESCRIPTION meta-information ... OK\n* checking for LF line-endings in source and make files and shell scripts\n* checking for empty or unneeded directories\nOmitted 'LazyData' from DESCRIPTION\n* building 'strapgod_0.0.4.9000.tar.gz'\n\n\n\npackage 'rlang' successfully unpacked and MD5 sums checked\n\n\npackage 'cli' successfully unpacked and MD5 sums checked\n\n\npackage 'utf8' successfully unpacked and MD5 sums checked\npackage 'pillar' successfully unpacked and MD5 sums checked\npackage 'stringi' successfully unpacked and MD5 sums checked\n\n\npackage 'R6' successfully unpacked and MD5 sums checked\npackage 'cpp11' successfully unpacked and MD5 sums checked\npackage 'scales' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\user.DESKTOP-QJ387K9\\AppData\\Local\\Temp\\RtmpQ35YFK\\downloaded_packages\n\n\n── R CMD build ─────────────────────────────────────────────────────────────────\n* checking for file 'C:\\Users\\user.DESKTOP-QJ387K9\\AppData\\Local\\Temp\\RtmpQ35YFK\\remotes79007f2a4396\\wilkelab-ungeviz-74e1651/DESCRIPTION' ... OK\n* preparing 'ungeviz':\n* checking DESCRIPTION meta-information ... OK\n* checking for LF line-endings in source and make files and shell scripts\n* checking for empty or unneeded directories\n* building 'ungeviz_0.1.0.tar.gz'"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_c.html#launch-the-application-in-r",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_c.html#launch-the-application-in-r",
    "title": "Hands-on_Ex04_c",
    "section": "Launch the application in R",
    "text": "Launch the application in R\n\nlibrary(ungeviz)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_c.html#visualising-uncertainty-with-hypothetical-outcome-plots-hops-1",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_c.html#visualising-uncertainty-with-hypothetical-outcome-plots-hops-1",
    "title": "Hands-on_Ex04_c",
    "section": "Visualising Uncertainty with Hypothetical Outcome Plots (HOPs)",
    "text": "Visualising Uncertainty with Hypothetical Outcome Plots (HOPs)\n\nggplot(data = exam, \n       (aes(x = factor(RACE), \n            y = MATHS))) +\n  geom_point(position = position_jitter(\n    height = 0.3, \n    width = 0.05), \n    size = 0.4, \n    color = \"#0072B2\", \n    alpha = 1/2) +\n  geom_hpline(data = sampler(25, \n                             group = RACE), \n              height = 0.6, \n              color = \"#D55E00\") +\n  theme_bw() + \n  transition_states(.draw, 1, 3)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_a.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_a.html",
    "title": "Hands-on_Ex04_a",
    "section": "",
    "text": "Visualising distribution is not new in statistical analysis.In this chapter, we are going to share with you two relatively new statistical graphic methods for visualising distribution, namely ridgeline plot and raincloud plot by using ggplot2 and its extensions."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_a.html#installing-and-loading-the-packages",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_a.html#installing-and-loading-the-packages",
    "title": "Hands-on_Ex04_a",
    "section": "Installing and loading the packages",
    "text": "Installing and loading the packages\nFor the purpose of this exercise, the following R packages will be used, they are:\n\nggridges, a ggplot2 extension specially designed for plotting ridgeline plots.\nggdist, a ggplot2 extension spacially desgin for visualising distribution and uncertainty.\ntidyverse, a family of R packages to meet the modern data science and visual communication needs.\nggthemes, a ggplot extension that provides the user additional themes, scales, and geoms for the ggplots package.\ncolorspace, an R package provides a broad toolbox for selecting individual colors or color palettes, manipulating these colors, and employing them in various kinds of visualisations.\n\nThe code chunk below will be used load these R packages into RStudio environment:\n\npacman::p_load(ggdist, ggridges, ggthemes,\n               colorspace, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_a.html#data-import",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_a.html#data-import",
    "title": "Hands-on_Ex04_a",
    "section": "Data import",
    "text": "Data import\nIn the code chunk below, read_csv() of readr package is used to import Exam_data.csv into R and saved it into a tibble data.frame.\n\nexam &lt;- read_csv(\"Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_a.html#plotting-ridgeline-graph-ggridges-method",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_a.html#plotting-ridgeline-graph-ggridges-method",
    "title": "Hands-on_Ex04_a",
    "section": "Plotting ridgeline graph: ggridges method",
    "text": "Plotting ridgeline graph: ggridges method\nggridges package provides two main geom to plot gridgeline plots, they are: geom_ridgeline() and geom_density_ridges(). The former takes height values directly to draw the ridgelines, and the latter first estimates data densities and then draws those using ridgelines.\nThe ridgeline plot below is plotted by using geom_density_ridges().\n\nThe plotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = lighten(\"#7097BB\", .3),\n    color = \"white\"\n  ) +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n    ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_a.html#varying-fill-colors-along-the-x-axis",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_a.html#varying-fill-colors-along-the-x-axis",
    "title": "Hands-on_Ex04_a",
    "section": "Varying fill colors along the x axis",
    "text": "Varying fill colors along the x axis\nSometimes we would like to have the area under a ridgeline not filled with a single solid color but rather with colors that vary in some form along the x axis. This effect can be achieved by using either geom_ridgeline_gradient() or geom_density_ridges_gradient(). Both geoms work just like geom_ridgeline() and geom_density_ridges(), except that they allow for varying fill colors. However, they do not allow for alpha transparency in the fill. For technical reasons, we can have changing fill colors or transparency but not both.\n\nThe plotThe code chunk\n\n\n\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Temp. [F]\",\n                       option = \"C\") +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Temp. [F]\",\n                       option = \"C\") +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_a.html#mapping-the-probabilities-directly-onto-colour",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_a.html#mapping-the-probabilities-directly-onto-colour",
    "title": "Hands-on_Ex04_a",
    "section": "Mapping the probabilities directly onto colour",
    "text": "Mapping the probabilities directly onto colour\nBeside providing additional geom objects to support the need to plot ridgeline plot, ggridges package also provides a stat function called stat_density_ridges() that replaces stat_density() of ggplot2.\nFigure below is plotted by mapping the probabilities calculated by using stat(ecdf) which represent the empirical cumulative density function for the distribution of English score.\n\nThe plotThe code chunk\n\n\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = 0.5 - abs(0.5-stat(ecdf)))) +\n  stat_density_ridges(geom = \"density_ridges_gradient\", \n                      calc_ecdf = TRUE) +\n  scale_fill_viridis_c(name = \"Tail probability\",\n                       direction = -1) +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = 0.5 - abs(0.5-stat(ecdf)))) +\n  stat_density_ridges(geom = \"density_ridges_gradient\", \n                      calc_ecdf = TRUE) +\n  scale_fill_viridis_c(name = \"Tail probability\",\n                       direction = -1) +\n  theme_ridges()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_a.html#ridgeline-plots-with-quantile-lines",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_a.html#ridgeline-plots-with-quantile-lines",
    "title": "Hands-on_Ex04_a",
    "section": "Ridgeline plots with quantile lines",
    "text": "Ridgeline plots with quantile lines\nBy using geom_density_ridges_gradient(), we can colour the ridgeline plot by quantile, via the calculated stat(quantile) aesthetic as shown in the figure below.\n\nThe plotThe code chunk\n\n\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = 4,\n    quantile_lines = TRUE) +\n  scale_fill_viridis_d(name = \"Quartiles\") +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = 4,\n    quantile_lines = TRUE) +\n  scale_fill_viridis_d(name = \"Quartiles\") +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\n\nInstead of using number to define the quantiles, we can also specify quantiles by cut points such as 2.5% and 97.5% tails to colour the ridgeline plot as shown in the figure below. :::panel-tabset ### The plot\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = c(0.025, 0.975)\n    ) +\n  scale_fill_manual(\n    name = \"Probability\",\n    values = c(\"#FF0000A0\", \"#A0A0A0A0\", \"#0000FFA0\"),\n    labels = c(\"(0, 0.025]\", \"(0.025, 0.975]\", \"(0.975, 1]\")\n  ) +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\nThe code chunk\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = c(0.025, 0.975)\n    ) +\n  scale_fill_manual(\n    name = \"Probability\",\n    values = c(\"#FF0000A0\", \"#A0A0A0A0\", \"#0000FFA0\"),\n    labels = c(\"(0, 0.025]\", \"(0.025, 0.975]\", \"(0.975, 1]\")\n  ) +\n  theme_ridges()\n\n\n\n\n\n\n\n\n:::"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_a.html#plotting-a-half-eye-graph",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_a.html#plotting-a-half-eye-graph",
    "title": "Hands-on_Ex04_a",
    "section": "Plotting a Half Eye graph",
    "text": "Plotting a Half Eye graph\nFirst, we will plot a Half-Eye graph by using stat_halfeye() of ggdist package.\nThis produces a Half Eye visualization, which is contains a half-density and a slab-interval. :::panel-tabset\n\nThe plot\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA)\n\n\n\n\n\n\n\n\n\n\nThe code chunk\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA)\n\n\n\n\n\n\n\n\n::: ## Adding the boxplot with geom_boxplot()\nNext, we will add the second geometry layer using geom_boxplot() of ggplot2. This produces a narrow boxplot. We reduce the width and adjust the opacity. :::panel-tabset ### The plot\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA)\n\n\n\n\n\n\n\n\n\n\nThe code chunk\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA)\n\n\n\n\n\n\n\n\n:::"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_a.html#adding-the-dot-plots-with-stat_dots",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_a.html#adding-the-dot-plots-with-stat_dots",
    "title": "Hands-on_Ex04_a",
    "section": "Adding the Dot Plots with stat_dots()",
    "text": "Adding the Dot Plots with stat_dots()\nNext, we will add the third geometry layer using stat_dots() of ggdist package. This produces a half-dotplot, which is similar to a histogram that indicates the number of samples (number of dots) in each bin. We select side = “left” to indicate we want it on the left-hand side.\n\nThe plotThe code chunk\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 2)\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_a.html#finishing-touch",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_a.html#finishing-touch",
    "title": "Hands-on_Ex04_a",
    "section": "Finishing touch",
    "text": "Finishing touch\nLastly, coord_flip() of ggplot2 package will be used to flip the raincloud chart horizontally to give it the raincloud appearance. At the same time, theme_economist() of ggthemes package is used to give the raincloud chart a professional publishing standard look.\n\nThe plotThe code chunk\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 1.5) +\n  coord_flip() +\n  theme_economist()\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 1.5) +\n  coord_flip() +\n  theme_economist()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_a.html",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_a.html",
    "title": "Hands-on_Ex03.a",
    "section": "",
    "text": "In this hands-on exercise, we will learn how to create interactive data visualisation by using functions provided by ggiraph and plotlyr packages. Beside that, we will learn how to make marginal histograms and bar charts in Tableau."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_a.html#learning-object",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_a.html#learning-object",
    "title": "Hands-on_Ex03.a",
    "section": "",
    "text": "In this hands-on exercise, we will learn how to create interactive data visualisation by using functions provided by ggiraph and plotlyr packages. Beside that, we will learn how to make marginal histograms and bar charts in Tableau."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_a.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_a.html#getting-started",
    "title": "Hands-on_Ex03.a",
    "section": "3.2 Getting Started",
    "text": "3.2 Getting Started\nFirst, write a code chunk to check, install and launch the following R packages:\n\nggiraph for making ‘ggplot’ graphics interactive.\nplotly, R library for plotting interactive statistical graphs.\nDT provides an R interface to the JavaScript library DataTables that create interactive table on html page.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\npatchwork for combining multiple ggplot2 graphs into one figure.\n\nThe code chunk below will be used to accomplish the task:\n\npacman::p_load(ggiraph, plotly, patchwork, DT, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_a.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_a.html#importing-data",
    "title": "Hands-on_Ex03.a",
    "section": "3.3 Importing Data",
    "text": "3.3 Importing Data\nIn this section, Exam_data.csv provided will be used. Using read_csv() of readr package, import Exam_data.csv into R.\n\nexam_data &lt;- read_csv(\"Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_a.html#interactive-data-visualisation---ggiraph-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_a.html#interactive-data-visualisation---ggiraph-methods",
    "title": "Hands-on_Ex03.a",
    "section": "3.4 Interactive Data Visualisation - ggiraph methods",
    "text": "3.4 Interactive Data Visualisation - ggiraph methods\nggiraph is a tool that allows you to create dynamic ggplot graphs. This allows you to add tooltips and this package allows the selection of graphical elements when used in shiny applications.\nInteractive is made with ggplot geometries that can understand three arguments:\n\nTooltip: a clolumn of data-sets that contain tooltips to be displayed when the mouse is over elements.\nOnclick: a column of data-sets that contain a JavaScript function to be executed when elements are clicked.\nData_id: a column of data-sets that contain an id to be associated with elements.\n\nIf it used within a shiny application, elements associated with an id (data_id) can be selected and manipulated on client and server sides.\n\n3.4.1 Tooltip effect with tooltip aesthetic\nBelow shows a typical code chunk to plot an interactive statistical graph by using ggiraph package. The code chunk consists of two parts. First, an ggplot object will be created. Next, girafe() of ggiraph will be used to create an interactive svg object.\n\n#|eval:true\n#|echo:true\n\n#create ggplot object\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n#remove the y-axis to avoid misleading visualization\n  scale_y_continuous(NULL, \n                     breaks = NULL)\n\n#use girafe() to create an interactive svg object(the tooltips)compatible in html environments.\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\nNotice that two steps are involved. First, an interactive version of ggplot2 geom (i.e. geom_dotplot_interactive()) will be used to create the basic graph. Then, girafe() will be used to generate an svg object to be displayed on an html page."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_a.html#interactivity",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_a.html#interactivity",
    "title": "Hands-on_Ex03.a",
    "section": "3.5 Interactivity",
    "text": "3.5 Interactivity\nBy hovering the mouse pointer on an data point of interest, the student’s ID will be displayed.\n\nlibrary(png)\n\nimg &lt;- readPNG(\"diagram.png\")\nplot(1:2, type='n')\nrasterImage(img, 1, 1, 2, 2)\n\n\n\n\n\n\n\n\n\n3.5.1 Displaying multiple information on tooltip\nThe content of the tooltip can be customised by including a list object as shown in the code chunk below. Creating a new filed called tooltip and it populates text in ID and CLASS fields into newly created field.\n#c(...): This function in R is used to combine values into a vector.Vectors are often used as building blocks for more complex data structures like data frames, matrices, and lists in R. In this case, it’s combining the result of thepaste0()function. #The$ operator is used to refer to and create or access columns in a data frame :::\n\nexam_data$tooltip &lt;- c(paste0(     \n  \"Name = \", exam_data$ID,         \n  \"\\n Class = \", exam_data$CLASS)) \n\n#\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), \n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_a.html#interactivity-1",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_a.html#interactivity-1",
    "title": "Hands-on_Ex03.a",
    "section": "3.6 Interactivity",
    "text": "3.6 Interactivity\n\n3.6.1 Customising Tooltip style\nCode chunk below uses opts_tooltip() of ggiraph to customize tooltip rendering by add css declarations.\n\ntooltip_css &lt;- \"background-color:white; #&lt;&lt;\nfont-style:bold; color:black;\" #&lt;&lt;\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = ID),                   \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(    #&lt;&lt;\n    opts_tooltip(    #&lt;&lt;\n      css = tooltip_css)) #&lt;&lt;\n)  \n\n\n\n\n\n\n\n3.6.2 Displaying statistics on tooltip\nCode chunk below shows an advanced way to customise tooltip. In this example, a function is used to compute 90% confident interval of the mean. The derived statistics are then displayed in the tooltip.\n\ntooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\ngg_point &lt;- ggplot(data=exam_data, \n                   aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(  \n                     tooltip(y, ymax))),  \n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  \n    fill = \"light blue\"\n  ) +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, size = 0.2\n  )\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)\n\n\n\n\n\n\n\n3.6.3 Hover effect with data_id aesthetic\nCode chunk below shows the second interactive feature of ggiraph, namely data_id.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(           \n    aes(data_id = CLASS),             \n    stackgroups = TRUE,               \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618                      \n)                                        \n\n\n\n\n\n\n\n3.6.4 Styling hover effect\nIn the code chunk below, css codes are used to change the highlighting effect.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\n\n\n\n\n\n\n3.6.5 Combining tooltip and hover effect\nThere are time that we want to combine tooltip and hover effect on the interactive statistical graph as shown in the code chunk below.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS, \n        data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\n\n\n\n\n###3.6.6 Click effect with onclick\nonclick argument of ggiraph provides hotlink interactivity on the web.\nThe code chunk below shown an example of onclick.\n\nexam_data$onclick &lt;- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(onclick = onclick),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618)             \n\n\n\n\n\n###3.6.7 Coordinated Multiple Views with ggiraph\nCoordinated multiple views methods has been implemented in the data visualisation below.\n\nscale_x_continuous() and scale_y_continuous() are the default scales for continuous x and y aesthetics.\nThe Cartesian coordinate system is the most familiar, and common, type of coordinate system. Usage: coord_cartesian( xlim = NULL, ylim = NULL, expand = TRUE, default = FALSE, clip = “on” )\n\n\np1 &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\np2 &lt;- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(code = print(p1 + p2), \n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       ) \n\n\n\n\n\nNotice that when a data point of one of the dotplot is selected, the corresponding data point ID on the second data visualisation will be highlighted too.\nIn order to build a coordinated multiple views as shown in the example above, the following programming strategy will be used:\nAppropriate interactive functions of ggiraph will be used to create the multiple views. patchwork function of patchwork package will be used inside girafe function to create the interactive coordinated multiple views."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_a.html#interactive-data-visualisation---plotly-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_a.html#interactive-data-visualisation---plotly-methods",
    "title": "Hands-on_Ex03.a",
    "section": "3.7 Interactive Data Visualisation - plotly methods!",
    "text": "3.7 Interactive Data Visualisation - plotly methods!\nThere are two ways to create interactive graph by using plotly, they are:\nby using plot_ly(), and by using ggplotly()\n\n3.7.1 Creating an interactive scatter plot: plot_ly() method\nThe tabset below shows an example a basic interactive plot created by using plot_ly().\n\nplot_ly(data = exam_data, \n             x = ~MATHS, \n             y = ~ENGLISH)\n\n\n\n\n\n\n\n3.7.2 Working with visual variable: plot_ly() method\nIn the code chunk below, color argument is mapped to a qualitative visual variable (i.e. RACE).\n\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE)\n\n\n\n\n\n\n\n3.7.3 Creating an interactive scatter plot: ggplotly() method\nThe code chunk below plots an interactive scatter plot by using ggplotly().\n\np &lt;- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nggplotly(p)\n\n\n\n\n\n\n\n3.7.4 Coordinated Multiple Views with plotly\nThe creation of a coordinated linked plot by using plotly involves three steps:\nhighlight_key() of plotly package is used as shared data. two scatterplots will be created by using ggplot2 functions. lastly, subplot() of plotly package is used to place them next to each other side-by-side.\n\nd &lt;- highlight_key(exam_data)\np1 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nsubplot(ggplotly(p1),\n        ggplotly(p2))\n\n\n\n\n\nhighlight_key() simply creates an object of class crosstalk::SharedData."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_a.html#interactive-data-visualisation---crosstalk-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_a.html#interactive-data-visualisation---crosstalk-methods",
    "title": "Hands-on_Ex03.a",
    "section": "3.8Interactive Data Visualisation - crosstalk methods!",
    "text": "3.8Interactive Data Visualisation - crosstalk methods!\n\n3.8.1 Interactive Data Table: DT package\nA wrapper of the JavaScript Library DataTables\nData objects in R can be rendered as HTML tables using the JavaScript library ‘DataTables’ (typically via R Markdown or Shiny).\n\nDT::datatable(exam_data, class= \"compact\")\n\n\n\n\n\n\n\n3.8.2 Linked brushing: crosstalk method\n\nd &lt;- highlight_key(exam_data) \np &lt;- ggplot(d, \n            aes(ENGLISH, \n                MATHS)) + \n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg &lt;- highlight(ggplotly(p),        \n                \"plotly_selected\")  \n\ncrosstalk::bscols(gg,               \n                  DT::datatable(d), \n                  widths = 5)        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk:\nhighlight() is a function of plotly package. It sets a variety of options for brushing (i.e., highlighting) multiple plots. These options are primarily designed for linking multiple plotly graphs, and may not behave as expected when linking plotly to another htmlwidget package via crosstalk. In some cases, other htmlwidgets will respect these options, such as persistent selection in leaflet.\nbscols() is a helper function of crosstalk package. It makes it easy to put HTML elements side by side. It can be called directly from the console but is especially designed to work in an R Markdown document. Warning: This will bring in all of Bootstrap!."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman packages to check if tidyverse packages are installed in the computer. If they are, then they will be launched into R.\n\npacman::p_load(tidyverse)\n\n\n\n\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#install-and-launching-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#install-and-launching-r-packages",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman packages to check if tidyverse packages are installed in the computer. If they are, then they will be launched into R.\n\npacman::p_load(tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-the-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-the-data",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "exam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Exercise02.html",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Exercise02.html",
    "title": "Hands-on_Ex2",
    "section": "",
    "text": "pacman::p_load(ggrepel, patchwork, \n               ggthemes, hrbrthemes,\n               tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Exercise02.html#beyond-ggplot2-annotation-ggrepel",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Exercise02.html#beyond-ggplot2-annotation-ggrepel",
    "title": "Hands-on_Ex2",
    "section": "Beyond ggplot2 Annotation: ggrepel",
    "text": "Beyond ggplot2 Annotation: ggrepel\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label(aes(label = ID), \n             hjust = .5, \n             vjust = -.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Exercise02.html#working-with-ggrepel",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Exercise02.html#working-with-ggrepel",
    "title": "Hands-on_Ex2",
    "section": "Working with ggrepel",
    "text": "Working with ggrepel\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label_repel(aes(label = ID), \n                   fontface = \"bold\") +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: ggrepel: 317 unlabeled data points (too many overlaps). Consider\nincreasing max.overlaps"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Exercise02.html#beyond-ggplot2-themes",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Exercise02.html#beyond-ggplot2-themes",
    "title": "Hands-on_Ex2",
    "section": "Beyond ggplot2 Themes",
    "text": "Beyond ggplot2 Themes\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_gray() +\n  ggtitle(\"Distribution of Maths scores\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Exercise02.html#working-with-ggtheme-package",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Exercise02.html#working-with-ggtheme-package",
    "title": "Hands-on_Ex2",
    "section": "Working with ggtheme package",
    "text": "Working with ggtheme package\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_economist()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Exercise02.html#working-with-hrbthems-package",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Exercise02.html#working-with-hrbthems-package",
    "title": "Hands-on_Ex2",
    "section": "Working with hrbthems package",
    "text": "Working with hrbthems package\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum()\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum(axis_title_size = 18,\n              base_size = 15,\n              grid = \"Y\")\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\n\n\nBeyond Single Graph\n\np1 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") + \n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of Maths scores\")\n\n\np2 &lt;- ggplot(data=exam_data, \n             aes(x = ENGLISH)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of English scores\")\n\n\np3 &lt;- ggplot(data=exam_data, \n             aes(x= MATHS, \n                 y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\nCombining two ggplot2 graphs\n\np1 + p2\n\n\n\n\n\n\n\n\n\n\nCreating a composite figure with tag\n\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'I')\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\npatchwork &lt;- (p1 / p2) | p3\npatchwork & theme_economist()\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_b.html",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_b.html",
    "title": "Hands-on_Ex03_b",
    "section": "",
    "text": "In this hands-on exercise, you will learn how to create animated data visualization by using gganimate and plotly r packages. At the same time, you will learn how to (i) reshape data by using tidyr package, and (ii) process, wrangle and transform data by using dplyr package.\n\n\nWhen creating animations, the plot does not actually move. Instead, many individual plots are built and then stitched together as movie frames, just like an old-school flip book or cartoon. Each frame is a different plot when conveying motion, which is built using some relevant subset of the aggregate data. The subset drives the flow of the animation when stitched back together.\n\n library(png)\n\nimg &lt;- readPNG(\"basic_concept.png\")\nplot(1:2, type='n')\nrasterImage(img, 1, 1, 2, 2)\n\n\n\n\n\n\n\n\n\n\n\nKey concepts and terminology related to this type of visualization:\n-Frame: In an animated line graph, each frame represents a different point in time or a different category.When the frame changes, the data points on the graph are updated to reflect the new data.\n-Animation Attributes:The animation attributes are the settings that control how the animation behaves."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_b.html#basic-concepts-of-animation",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_b.html#basic-concepts-of-animation",
    "title": "Hands-on_Ex03_b",
    "section": "",
    "text": "When creating animations, the plot does not actually move. Instead, many individual plots are built and then stitched together as movie frames, just like an old-school flip book or cartoon. Each frame is a different plot when conveying motion, which is built using some relevant subset of the aggregate data. The subset drives the flow of the animation when stitched back together.\n\n library(png)\n\nimg &lt;- readPNG(\"basic_concept.png\")\nplot(1:2, type='n')\nrasterImage(img, 1, 1, 2, 2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_b.html#terminology",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_b.html#terminology",
    "title": "Hands-on_Ex03_b",
    "section": "",
    "text": "Key concepts and terminology related to this type of visualization:\n-Frame: In an animated line graph, each frame represents a different point in time or a different category.When the frame changes, the data points on the graph are updated to reflect the new data.\n-Animation Attributes:The animation attributes are the settings that control how the animation behaves."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_b.html#loading-the-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_b.html#loading-the-r-packages",
    "title": "Hands-on_Ex03_b",
    "section": "4.2.1 Loading the R packages",
    "text": "4.2.1 Loading the R packages\nFirst, write a code chunk to check, install and load the following R packages: - plotly, R library for plotting interactive statistical graphs. - gganimate, extends the grammar of graphics as implemented by ggplot2 to include the description of animation. - gifski, converts video frames to GIF animations using pngquant’s fancy features for efficient cross-frame palettes and temporal dithering. It produces animated GIFs that use thousands of colors per frame. - gapminder, An excerpt of the data available at Gapminder.org. We just want to use its country_colors scheme. - tidyverse, family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\n\npacman::p_load(readxl, gifski, gapminder,\n               plotly, gganimate, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_b.html#importing-the-data",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_b.html#importing-the-data",
    "title": "Hands-on_Ex03_b",
    "section": "4.2.2 Importing the data",
    "text": "4.2.2 Importing the data\nIn this hands-on exercise, the Data worksheet from GlobalPopulation Excel workbook will be used.\nWrite a code chunk to import Data worksheet from GlobalPopulation Excel workbook by using appropriate R package from tidyverse family.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_each_(funs(factor(.)), col) %&gt;%\n  mutate(Year = as.integer(Year))\n\n\nread_xls() of readxl package is used to import the Excel worksheet.\nmutate_each_() of dplyr package is used to convert all character data type into factor.\nmutate of dplyr package is used to convert data values of Year field into integer.\nfuns() is part of the dplyr package, was used to create a list of function calls.However, it has been deprecated and replaced by the list() function.\n\nUnfortunately, mutate_each_() was deprecated in dplyr 0.7.0. and funs() was deprecated in dplyr 0.8.0. In view of this, we will re-write the code by using mutate_at() as shown in the code chunk below.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_at(col, as.factor) %&gt;%\n  mutate(Year = as.integer(Year))\n\nInstead of using mutate_at(), across() can be used to derive the same outputs.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate(across(col, as.factor)) %&gt;%\n  mutate(Year = as.integer(Year))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_b.html#building-a-static-population-bubble-plot",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_b.html#building-a-static-population-bubble-plot",
    "title": "Hands-on_Ex03_b",
    "section": "4.3.1 Building a static population bubble plot",
    "text": "4.3.1 Building a static population bubble plot\nIn the code chunk below, the basic ggplot2 functions are used to create a static bubble plot.\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_b.html#building-the-animated-bubble-plot",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_b.html#building-the-animated-bubble-plot",
    "title": "Hands-on_Ex03_b",
    "section": "4.3.2 Building the animated bubble plot",
    "text": "4.3.2 Building the animated bubble plot\n\ntransition_time() of gganimate is used to create transition through distinct states in time (i.e. Year).That is intended for data where the states are representing specific point in time.\nease_aes() is used to control easing of aesthetics. The default is linear. Other methods are: quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce.\n\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +       \n  ease_aes('linear')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_b.html#building-an-animated-bubble-plot-ggplotly-method",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_b.html#building-an-animated-bubble-plot-ggplotly-method",
    "title": "Hands-on_Ex03_b",
    "section": "4.4.1 Building an animated bubble plot: ggplotly() method",
    "text": "4.4.1 Building an animated bubble plot: ggplotly() method\nIn this sub-section, you will learn how to create an animated bubble plot by using ggplotly() method.\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young')\n\nggplotly(gg)\n\n\n\n\n\n\nAppropriate ggplot2 functions are used to create a static bubble plot. The output is then saved as an R object called gg.\nggplotly() is then used to convert the R graphic object into an animated svg object.\n\nNotice that although show.legend = FALSE argument was used, the legend still appears on the plot. To overcome this problem, theme(legend.position=‘none’) should be used as shown in the plot and code chunk below.\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young') + \n  theme(legend.position='none')\n\nggplotly(gg)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_b.html#building-an-animated-bubble-plot-plot_ly-method",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_b.html#building-an-animated-bubble-plot-plot_ly-method",
    "title": "Hands-on_Ex03_b",
    "section": "4.4.2 Building an animated bubble plot: plot_ly() method",
    "text": "4.4.2 Building an animated bubble plot: plot_ly() method\nIn this sub-section, you will learn how to create an animated bubble plot by using plot_ly() method.\n\nbp &lt;- globalPop %&gt;%\n  plot_ly(x = ~Old, \n          y = ~Young, \n          size = ~Population, \n          color = ~Continent,\n          sizes = c(2, 100),\n          frame = ~Year, \n          text = ~Country, \n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          ) %&gt;%\n  layout(showlegend = FALSE)\nbp"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_b.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_b.html",
    "title": "Hands-on_Ex04_b",
    "section": "",
    "text": "ggstatsplot package to create visual graphics with rich statistical information\nperformance package to visualise model diagnostics\nparameters package to visualise model parameters"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_b.html#installing-and-launching-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_b.html#installing-and-launching-r-packages",
    "title": "Hands-on_Ex04_b",
    "section": "Installing and launching R packages",
    "text": "Installing and launching R packages\nIn this exercise, ggstatsplot and tidyverse will be used.\n\npacman::p_load(ggstatsplot, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_b.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_b.html#importing-data",
    "title": "Hands-on_Ex04_b",
    "section": "Importing data",
    "text": "Importing data\n\nexam &lt;- read_csv(\"Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_b.html#one-sample-test-gghistostats-method",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_b.html#one-sample-test-gghistostats-method",
    "title": "Hands-on_Ex04_b",
    "section": "One-sample test: gghistostats() method",
    "text": "One-sample test: gghistostats() method\nIn the code chunk below, gghistostats() is used to to build an visual of one-sample test on English scores.\n\nset.seed(1234)\n\ngghistostats(\n  data = exam,\n  x = ENGLISH,\n  type = \"bayes\",\n  test.value = 60,\n  xlab = \"English scores\"\n)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_b.html#unpacking-the-bayes-factor",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_b.html#unpacking-the-bayes-factor",
    "title": "Hands-on_Ex04_b",
    "section": "Unpacking the Bayes Factor",
    "text": "Unpacking the Bayes Factor\n\nA Bayes factor is the ratio of the likelihood of one particular hypothesis to the likelihood of another. It can be interpreted as a measure of the strength of evidence in favor of one theory among two competing theories.\nThat’s because the Bayes factor gives us a way to evaluate the data in favor of a null hypothesis, and to use external information to do so. It tells us what the weight of the evidence is in favor of a given hypothesis.\nWhen we are comparing two hypotheses, H1 (the alternate hypothesis) and H0 (the null hypothesis), the Bayes Factor is often written as B10. Null Hypothesis (H0): The true mean of the science scores is equal to the test value of 60. Alternative Hypothesis (H1): The true mean of the science scores is not equal to 60.\nk log(n)- 2log(L(θ̂)): L(θ̂) represents the likelihood of the model tested, given your data, when evaluated at maximum likelihood values of θ."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_b.html#how-to-interpret-bayes-factor",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_b.html#how-to-interpret-bayes-factor",
    "title": "Hands-on_Ex04_b",
    "section": "How to interpret Bayes Factor",
    "text": "How to interpret Bayes Factor\nA Bayes Factor can be any positive number. One of the most common interpretations is this one—first proposed by Harold Jeffereys (1961) and slightly modified by Lee and Wagenmakers in 2013:\nStatistical Annotations:\n\nlog_e(BF_01) = 2.12: This is the natural logarithm of the Bayes Factor (BF) comparing the null hypothesis (science scores = 60) to the alternative hypothesis. A Bayes Factor greater than 1 indicates evidence against the null, and the value here suggests that the data provide evidence against the null hypothesis H0 (since log_e(2.12) &gt; 0).\nΔ_posterior mean = 1.12: This indicates the difference between the sample mean and the test value (60), suggesting the average score is higher than the test value.\n95% CI: This confidence interval shows the range of values within which the true mean score lies with 95% probability, according to the posterior distribution.\nJZS = 0.71: This likely refers to the magnitude of the difference between groups or conditions."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_b.html#two-sample-mean-test-ggbetweenstats",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_b.html#two-sample-mean-test-ggbetweenstats",
    "title": "Hands-on_Ex04_b",
    "section": "Two-sample mean test: ggbetweenstats()",
    "text": "Two-sample mean test: ggbetweenstats()\nIn the code chunk below, ggbetweenstats() is used to build a visual for two-sample mean test of Maths scores by gender.\n\nggbetweenstats(\n  data = exam,\n  x = GENDER, \n  y = MATHS,\n  type = \"np\",\n  messages = FALSE\n)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_b.html#oneway-anova-test-ggbetweenstats-method",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_b.html#oneway-anova-test-ggbetweenstats-method",
    "title": "Hands-on_Ex04_b",
    "section": "Oneway ANOVA Test: ggbetweenstats() method",
    "text": "Oneway ANOVA Test: ggbetweenstats() method\nIn the code chunk below, ggbetweenstats is used to build a visual for One-way ANOVA test on English score by race.\n\nggbetweenstats(\n  data = exam,\n  x = RACE, \n  y = ENGLISH,\n  type = \"p\",\n  mean.ci = TRUE, \n  pairwise.comparisons = TRUE, \n  pairwise.display = \"s\",\n  p.adjust.method = \"fdr\",\n  messages = FALSE\n)\n\n\n\n\n\n\n\n\n\n“ns” → only non-significant\n“s” → only significant\n“all” → everything"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_b.html#ggbetweenstats---summary-of-tests",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_b.html#ggbetweenstats---summary-of-tests",
    "title": "Hands-on_Ex04_b",
    "section": "ggbetweenstats - Summary of tests",
    "text": "ggbetweenstats - Summary of tests\n  ## Significant Test of Correlation: ggscatterstats()\nIn the code chunk below, ggscatterstats() is used to build a visual for Significant Test of Correlation between Maths scores and English scores.\n\nggscatterstats(\n  data = exam,\n  x = MATHS,\n  y = ENGLISH,\n  marginal = FALSE,\n  )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_b.html#significant-test-of-association-depedence-ggbarstats-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_b.html#significant-test-of-association-depedence-ggbarstats-methods",
    "title": "Hands-on_Ex04_b",
    "section": "Significant Test of Association (Depedence) : ggbarstats() methods",
    "text": "Significant Test of Association (Depedence) : ggbarstats() methods\nIn the code chunk below, the Maths scores is binned into a 4-class variable by using cut().\n\nexam1 &lt;- exam %&gt;% \n  mutate(MATHS_bins = \n           cut(MATHS, \n               breaks = c(0,60,75,85,100))\n)\n\nIn this code chunk below ggbarstats is used to build a visual for Significant Test of Association\n\nggbarstats(exam1, \n           x = MATHS_bins, \n           y = GENDER)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_d.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_d.html",
    "title": "Hands-on_Ex04_d",
    "section": "",
    "text": "Funnel plot is a specially designed data visualisation for conducting unbiased comparison between outlets, stores or business entities. By the end of this hands-on exercise, you will gain hands-on experience on:\n\nplotting funnel plots by using funnelPlotR package\nplotting static funnel plot by using ggplot2 package\nplotting interactive funnel plot by using both plotly R and ggplot2 packages"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_d.html#funnelplotr-methods-the-basic-plot",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_d.html#funnelplotr-methods-the-basic-plot",
    "title": "Hands-on_Ex04_d",
    "section": "FunnelPlotR methods: The basic plot",
    "text": "FunnelPlotR methods: The basic plot\n\nfunnel_plot(\n  .data = covid19,\n  numerator = Positive,\n  denominator = Death,\n  group = `Sub-district`\n)\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 0 are outliers. \nPlot is adjusted for overdispersion. \n\n\nA funnel plot object with 267 points of which 0 are outliers. Plot is adjusted for overdispersion.\n\ngroup in this function is different from the scatterplot. Here, it defines the level of the points to be plotted i.e. Sub-district, District or City. If Cityc is chosen, there are only six data points.\nBy default, data_type argument is “SR”.\nlimit:Plot limits, accepted values are: 95 or 99, corresponding to 95% or 99.8% quantiles of the distribution."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_d.html#funnelplotr-methods-makeover-1",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_d.html#funnelplotr-methods-makeover-1",
    "title": "Hands-on_Ex04_d",
    "section": "FunnelPlotR methods: Makeover 1",
    "text": "FunnelPlotR methods: Makeover 1\n\nfunnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`,\n  data_type = \"PR\",     #&lt;&lt;\n  xrange = c(0, 6500),  #&lt;&lt;\n  yrange = c(0, 0.05)   #&lt;&lt;\n)\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\nThings to learn from the code chunk above. + data_type argument is used to change from default “SR” to “PR” (i.e. proportions). + xrange and yrange are used to set the range of x-axis and y-axis"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_d.html#funnelplotr-methods-makeover-2",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_d.html#funnelplotr-methods-makeover-2",
    "title": "Hands-on_Ex04_d",
    "section": "FunnelPlotR methods: Makeover 2",
    "text": "FunnelPlotR methods: Makeover 2\n\nfunnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`,\n  data_type = \"PR\",   \n  xrange = c(0, 6500),  \n  yrange = c(0, 0.05),\n  label = NA,\n  title = \"Cumulative COVID-19 Fatality Rate by Cumulative Total Number of COVID-19 Positive Cases\", #&lt;&lt;           \n  x_label = \"Cumulative COVID-19 Positive Cases\", #&lt;&lt;\n  y_label = \"Cumulative Fatality Rate\"  #&lt;&lt;\n)\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\n\nlabel = NA argument is to removed the default label outliers feature.\ntitle argument is used to add plot title.\nx_label and y_label arguments are used to add/edit x-axis and y-axis titles."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_d.html#computing-the-basic-derived-fields",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_d.html#computing-the-basic-derived-fields",
    "title": "Hands-on_Ex04_d",
    "section": "Computing the basic derived fields",
    "text": "Computing the basic derived fields\nTo plot the funnel plot from scratch, we need to derive cumulative death rate and standard error of cumulative death rate.\n\ndf &lt;- covid19 %&gt;%\n  mutate(rate = Death / Positive) %&gt;%\n  mutate(rate.se = sqrt((rate*(1-rate)) / (Positive))) %&gt;%\n  filter(rate &gt; 0)\n\nNext, the fit.mean is computed by using the code chunk below.\n\nfit.mean &lt;- weighted.mean(df$rate, 1/df$rate.se^2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_d.html#calculate-lower-and-upper-limits-for-95-and-99.9-ci",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_d.html#calculate-lower-and-upper-limits-for-95-and-99.9-ci",
    "title": "Hands-on_Ex04_d",
    "section": "Calculate lower and upper limits for 95% and 99.9% CI",
    "text": "Calculate lower and upper limits for 95% and 99.9% CI\nThe code chunk below is used to compute the lower and upper limits for 95% confidence interval.\n\nnumber.seq &lt;- seq(1, max(df$Positive), 1)\nnumber.ll95 &lt;- fit.mean - 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul95 &lt;- fit.mean + 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ll999 &lt;- fit.mean - 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul999 &lt;- fit.mean + 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \ndfCI &lt;- data.frame(number.ll95, number.ul95, number.ll999, \n                   number.ul999, number.seq, fit.mean)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_d.html#plotting-a-static-funnel-plot",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_d.html#plotting-a-static-funnel-plot",
    "title": "Hands-on_Ex04_d",
    "section": "Plotting a static funnel plot",
    "text": "Plotting a static funnel plot\nIn the code chunk below, ggplot2 functions are used to plot a static funnel plot.\n\np &lt;- ggplot(df, aes(x = Positive, y = rate)) +\n  geom_point(aes(label=`Sub-district`), \n             alpha=0.4) +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_hline(data = dfCI, \n             aes(yintercept = fit.mean), \n             size = 0.4, \n             colour = \"grey40\") +\n  coord_cartesian(ylim=c(0,0.05)) +\n  annotate(\"text\", x = 1, y = -0.13, label = \"95%\", size = 3, colour = \"grey40\") + \n  annotate(\"text\", x = 4.5, y = -0.18, label = \"99%\", size = 3, colour = \"grey40\") + \n  ggtitle(\"Cumulative Fatality Rate by Cumulative Number of COVID-19 Cases\") +\n  xlab(\"Cumulative Number of COVID-19 Cases\") + \n  ylab(\"Cumulative Fatality Rate\") +\n  theme_light() +\n  theme(plot.title = element_text(size=12),\n        legend.position = c(0.91,0.85), \n        legend.title = element_text(size=7),\n        legend.text = element_text(size=7),\n        legend.background = element_rect(colour = \"grey60\", linetype = \"dotted\"),\n        legend.key.height = unit(0.3, \"cm\"))\np"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_d.html#interactive-funnel-plot-plotly-ggplot2",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_d.html#interactive-funnel-plot-plotly-ggplot2",
    "title": "Hands-on_Ex04_d",
    "section": "Interactive Funnel Plot: plotly + ggplot2",
    "text": "Interactive Funnel Plot: plotly + ggplot2\nThe funnel plot created using ggplot2 functions can be made interactive with ggplotly() of plotly r package.\n\nfp_ggplotly &lt;- ggplotly(p,\n  tooltip = c(\"label\", \n              \"x\", \n              \"y\"))\nfp_ggplotly"
  }
]